---
title: "FP2"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(Hmisc)

mdb.get('XXH2023_YRBS_Data.mdb', tables = TRUE)
data <- mdb.get('XXH2023_YRBS_Data.mdb', tables = "XXHq")
subset <- data |>
  select(q1:q107) |> 
  select(!q6:q7)|>
  select_if(is.numeric)

data_clean <- na.omit(subset)
```

# PCA
```{r}
# Compute PCs
pr.out <- prcomp(data_clean, scale = TRUE)
pr.out$rotation # rotation matrices for each PC 

# PC1 v PC2 plot
biplot(pr.out, scale = 0)

# evaluate variance of PCs
pr.out$sdev # standard dev.
pr.var <- pr.out$sdev^2 # varience
pr.var
pve <- pr.var / sum(pr.var) # proportion varience explained
pve

head(pve*100) # top percentages of varience explained (first 6 PCs)
```

```{r}
par(mfrow = c(1, 2))
# Scree plot of subset
  # only first 10 components are visualized to better determine the location of the plots "elbow" 
plot(pve[1:10], xlab = "Principal Component",
     ylab = "Proportion of Variance Explained", ylim = c(0,1),
     type = "b")

# Cumulative explained variance
  # First 10 PCs to match visualization above
plot(cumsum(pve[1:10]), xlab = "Principal Component", ylab = "Cumulative Proprotion of Variance Explained", ylim = c(0,1), type = "b")

# Cumulative proportion variance explained by first 3 components
sum((pve[1:3]))
```


```{r}
pc_space <- as.matrix(data_clean) %*% pr.out$rotation[,1:3]
```

# Next steps
Now that we have calculated our Principal Component Analysis, our next step in our plan of action is to pull out ~4 PCs from that capture the most variance. Then, we will do some data wrangling to obtain a PC score vector for each observation in the dataset. After we have completed this step, we will either use hierarchical clustering or k-means clustering in order to cluster our data into groups. We will label each observation into a specific cluster. Lastly, we will do discriminant analysis in order to pull out which specific predictors are the most important in separating the clusters from one another. 

# K-means clustering
```{r}
set.seed(1)

km.out <- kmeans(data_clean, 4, nstart = 20)
km.out
```

# Hierarchical clustering
